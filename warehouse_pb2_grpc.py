# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import warehouse_pb2 as warehouse__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in warehouse_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class InventoryServiceStub(object):
    """------------------------------
    服务接口
    ------------------------------
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddItem = channel.unary_unary(
                '/logistics.InventoryService/AddItem',
                request_serializer=warehouse__pb2.AddItemRequest.SerializeToString,
                response_deserializer=warehouse__pb2.AddItemResponse.FromString,
                _registered_method=True)
        self.UpdateItem = channel.unary_unary(
                '/logistics.InventoryService/UpdateItem',
                request_serializer=warehouse__pb2.UpdateItemRequest.SerializeToString,
                response_deserializer=warehouse__pb2.UpdateItemResponse.FromString,
                _registered_method=True)
        self.TakeItem = channel.unary_unary(
                '/logistics.InventoryService/TakeItem',
                request_serializer=warehouse__pb2.TakeItemRequest.SerializeToString,
                response_deserializer=warehouse__pb2.TakeItemResponse.FromString,
                _registered_method=True)
        self.QueryItem = channel.unary_unary(
                '/logistics.InventoryService/QueryItem',
                request_serializer=warehouse__pb2.QueryItemRequest.SerializeToString,
                response_deserializer=warehouse__pb2.QueryItemResponse.FromString,
                _registered_method=True)


class InventoryServiceServicer(object):
    """------------------------------
    服务接口
    ------------------------------
    """

    def AddItem(self, request, context):
        """1) Add Item Resource
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateItem(self, request, context):
        """2) Update Item Resource
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TakeItem(self, request, context):
        """3) Take Item Resource（出库/扣减）
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryItem(self, request, context):
        """4) Query Item Resource
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_InventoryServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddItem': grpc.unary_unary_rpc_method_handler(
                    servicer.AddItem,
                    request_deserializer=warehouse__pb2.AddItemRequest.FromString,
                    response_serializer=warehouse__pb2.AddItemResponse.SerializeToString,
            ),
            'UpdateItem': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateItem,
                    request_deserializer=warehouse__pb2.UpdateItemRequest.FromString,
                    response_serializer=warehouse__pb2.UpdateItemResponse.SerializeToString,
            ),
            'TakeItem': grpc.unary_unary_rpc_method_handler(
                    servicer.TakeItem,
                    request_deserializer=warehouse__pb2.TakeItemRequest.FromString,
                    response_serializer=warehouse__pb2.TakeItemResponse.SerializeToString,
            ),
            'QueryItem': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryItem,
                    request_deserializer=warehouse__pb2.QueryItemRequest.FromString,
                    response_serializer=warehouse__pb2.QueryItemResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'logistics.InventoryService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('logistics.InventoryService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class InventoryService(object):
    """------------------------------
    服务接口
    ------------------------------
    """

    @staticmethod
    def AddItem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/logistics.InventoryService/AddItem',
            warehouse__pb2.AddItemRequest.SerializeToString,
            warehouse__pb2.AddItemResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateItem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/logistics.InventoryService/UpdateItem',
            warehouse__pb2.UpdateItemRequest.SerializeToString,
            warehouse__pb2.UpdateItemResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TakeItem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/logistics.InventoryService/TakeItem',
            warehouse__pb2.TakeItemRequest.SerializeToString,
            warehouse__pb2.TakeItemResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def QueryItem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/logistics.InventoryService/QueryItem',
            warehouse__pb2.QueryItemRequest.SerializeToString,
            warehouse__pb2.QueryItemResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class LoggerServiceStub(object):
    """日志服务
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.LogOperation = channel.unary_unary(
                '/logistics.LoggerService/LogOperation',
                request_serializer=warehouse__pb2.LogRequest.SerializeToString,
                response_deserializer=warehouse__pb2.LogResponse.FromString,
                _registered_method=True)
        self.QueryLogs = channel.unary_unary(
                '/logistics.LoggerService/QueryLogs',
                request_serializer=warehouse__pb2.QueryLogsRequest.SerializeToString,
                response_deserializer=warehouse__pb2.QueryLogsResponse.FromString,
                _registered_method=True)
        self.GetStats = channel.unary_unary(
                '/logistics.LoggerService/GetStats',
                request_serializer=warehouse__pb2.StatsRequest.SerializeToString,
                response_deserializer=warehouse__pb2.StatsResponse.FromString,
                _registered_method=True)
        self.ClearLogs = channel.unary_unary(
                '/logistics.LoggerService/ClearLogs',
                request_serializer=warehouse__pb2.ClearLogsRequest.SerializeToString,
                response_deserializer=warehouse__pb2.ClearLogsResponse.FromString,
                _registered_method=True)


class LoggerServiceServicer(object):
    """日志服务
    """

    def LogOperation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClearLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LoggerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'LogOperation': grpc.unary_unary_rpc_method_handler(
                    servicer.LogOperation,
                    request_deserializer=warehouse__pb2.LogRequest.FromString,
                    response_serializer=warehouse__pb2.LogResponse.SerializeToString,
            ),
            'QueryLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryLogs,
                    request_deserializer=warehouse__pb2.QueryLogsRequest.FromString,
                    response_serializer=warehouse__pb2.QueryLogsResponse.SerializeToString,
            ),
            'GetStats': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStats,
                    request_deserializer=warehouse__pb2.StatsRequest.FromString,
                    response_serializer=warehouse__pb2.StatsResponse.SerializeToString,
            ),
            'ClearLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.ClearLogs,
                    request_deserializer=warehouse__pb2.ClearLogsRequest.FromString,
                    response_serializer=warehouse__pb2.ClearLogsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'logistics.LoggerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('logistics.LoggerService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class LoggerService(object):
    """日志服务
    """

    @staticmethod
    def LogOperation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/logistics.LoggerService/LogOperation',
            warehouse__pb2.LogRequest.SerializeToString,
            warehouse__pb2.LogResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def QueryLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/logistics.LoggerService/QueryLogs',
            warehouse__pb2.QueryLogsRequest.SerializeToString,
            warehouse__pb2.QueryLogsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/logistics.LoggerService/GetStats',
            warehouse__pb2.StatsRequest.SerializeToString,
            warehouse__pb2.StatsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ClearLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/logistics.LoggerService/ClearLogs',
            warehouse__pb2.ClearLogsRequest.SerializeToString,
            warehouse__pb2.ClearLogsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
